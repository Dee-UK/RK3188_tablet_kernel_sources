53,57c53
< #if defined(CONFIG_DP_ANX6345)
< #include<linux/anx6345.h>
< #endif
< 
< #if defined(CONFIG_CT36X_TS) 
---
> #if defined(CONFIG_CT36X_TS)
68a65,68
> #ifdef CONFIG_CW2015_BATTERY
> #include <linux/power/cw2015_battery.h>
> #endif
> 
95,98d94
< #if defined(CONFIG_CW2015_BATTERY)
< #include <linux/power/cw2015_battery.h>
< #endif
< 
106,116d101
< static int tp_probe_flag = 0;
< extern int get_probe_state(void)
< {
<        return tp_probe_flag;
< }
< 
< extern int set_probe_state(int state)
< {
<        tp_probe_flag = state;
< }
< 
128d112
< #if defined (CONFIG_PIPO_M6PRO)
137,173d120
< 		.desc	= "back",
< 		.code	= KEY_BACK,
< 		.gpio = INVALID_GPIO,
< 		.adc_value	= 355,
< 		.active_low = PRESS_LEV_LOW,
< 	},
< 	{
< 		.desc	= "vol-",
< 		.code	= KEY_VOLUMEDOWN,  //KEY_VOLUMEDOWN,
< 		.gpio = INVALID_GPIO,
< 		.adc_value	= 145,
< 		.active_low = PRESS_LEV_LOW,
< 	},
< 	{
< 		.desc	= "vol+",
< 		.code	= KEY_VOLUMEUP,
< 		.gpio = INVALID_GPIO,
< 		.adc_value	= 1,
< 		.active_low = PRESS_LEV_LOW,
< 	},
< #else
< 	{
< 		.desc	= "play",
< 		.code	= KEY_POWER,
< 		.gpio	= RK30_PIN0_PA4, 
< 		.active_low = PRESS_LEV_LOW,
< 		.wakeup	= 1,
< 	},
< 		{
< 		.desc	= "menu",
< 		.code	= EV_MENU,
< 		.adc_value	= 159,
< 		.gpio = INVALID_GPIO,
< 		.active_low = PRESS_LEV_LOW,
< 		.code_long_press = KEY_VOLUMEDOWN,
< 	},
< 	{
179d125
< 		.code_long_press = KEY_VOLUMEUP,
181d126
< #endif
240c185
< 	.bp_power 		= RK30_PIN0_PC6, 	// 3g_power,
---
> 	.bp_power 		= RK30_PIN0_PC6, 	// 3g_power,\B8\F9\BE\DD?\BC?\D3\CF\DF\C5\E4\D6\C3
242c187
< 	.bp_reset		= BP_UNKNOW_DATA,   
---
> 	.bp_reset			= BP_UNKNOW_DATA,   //\B8\F9\BE\DD?\BC\CA\C5\E4\D6\C3
245,247c190,192
< 	.bp_wakeup_ap 		= RK30_PIN0_PC5,
< 	.ap_wakeup_bp 		= RK30_PIN0_PC4,	
< 	.ap_ready 		= RK30_PIN0_PC4,//BP_UNKNOW_DATA,
---
> 	.bp_wakeup_ap 	= RK30_PIN0_PC5,	//\B8\F9\BE\DD?\BC?\D3\CF\DF\C5\E4\D6\C3
> 	.ap_wakeup_bp 	= RK30_PIN0_PC4,	//\B8\F9\BE\DD?\BC\CA\C5\E4\D6\C3
> 	.ap_ready 		= RK30_PIN0_PC4,//BP_UNKNOW_DATA,	//
249c194
< 	.gpio_valid 		= 1,		// set to 1 to use gpio in bp_auto_info
---
> 	.gpio_valid 		= 1,		//if 1:gpio is define in bp_auto_info,if 0:is not use gpio in bp_auto_info
262c207,211
< #if defined(CONFIG_CT36X_TS)  
---
> #if defined(CONFIG_TOUCHSCREEN_CT36X)
> #define TOUCH_MAX_X            1920
> #define TOUCH_MAX_y            1200
> #define TOUCH_RESET_PIN       RK30_PIN0_PB6
> #define TOUCH_INT_PIN         RK30_PIN1_PB7
264c213,215
< #define TOUCH_MODEL		363
---
> static void ct3610_hw_init(void)
> {
> 	int ret;
266,269c217,220
< #if defined (CONFIG_PIPO_M6PRO)
< #define TOUCH_MAX_X		1024
< #define TOUCH_MAX_y		768
< #endif
---
> 	printk("%s\n", __FUNCTION__);
> 	//rk30_mux_api_set(GPIO4D0_SMCDATA8_TRACEDATA8_NAME, GPIO4D_GPIO4D0);
> 		//rk30_mux_api_set(GPIO4C2_SMCDATA2_TRACEDATA2_NAME, GPIO4C_GPIO4C2);
> 		//printk("%s:0x%x,0x%x\n",__func__,rk30_mux_api_get(GPIO4D0_SMCDATA8_TRACEDATA8_NAME),rk30_mux_api_get(GPIO4C2_SMCDATA2_TRACEDATA2_NAME));
271,274c222,225
< #if defined (CONFIG_PIPO_U8)
< #define TOUCH_MAX_X		768
< #define TOUCH_MAX_y		1024
< #endif
---
> 	if(TOUCH_RESET_PIN != INVALID_GPIO){
> 		gpio_request(TOUCH_RESET_PIN, "ct360_reset");
> 		gpio_direction_output(TOUCH_RESET_PIN, GPIO_HIGH);
> 	}
276,279c227,238
< #if !defined (CONFIG_PIPO_M6PRO) && !defined(CONFIG_PIPO_U8)
< #define TOUCH_MAX_X		1920
< #define TOUCH_MAX_y		1200
< #endif
---
> 	if(TOUCH_INT_PIN != INVALID_GPIO){
> 		ret = gpio_request(TOUCH_INT_PIN, "ct360_irq");
> 		if(ret != 0){
> 			gpio_free(TOUCH_INT_PIN);
> 			printk("%s: ct360 irq request err\n", __func__);
> 		}
> 		else{
> 			gpio_direction_input(TOUCH_INT_PIN);
> 			gpio_pull_updown(TOUCH_INT_PIN, GPIO_HIGH);
> 		}
> 	}
> }
281,282d239
< #define TOUCH_RESET_PIN		RK30_PIN0_PB6
< #define TOUCH_INT_PIN		RK30_PIN1_PB7
284,285c241,256
< static struct ct36x_platform_data ct36x_info = {
< 	.model   = TOUCH_MODEL,
---
> static void ct3610_hw_shutdown(int reset)
> {
> 	printk("%s: %d\n", __FUNCTION__, reset);
> 
> 	if(TOUCH_RESET_PIN != INVALID_GPIO){
> 		if(reset){
> 			gpio_set_value(TOUCH_RESET_PIN, GPIO_HIGH);
> 		}
> 		else{
> 			gpio_set_value(TOUCH_RESET_PIN, GPIO_LOW);
> 		}
> 	}
> }
> 
> static struct ct360_platform_data ct3610_info = {
> 	.model   = 360,
288,297c259,260
< 
< 	.rst_io = {
< 		.gpio = TOUCH_RESET_PIN,
< 		.active_low = 1,
< 	},
< 	.irq_io = {
< 		.gpio = TOUCH_INT_PIN,
< 		.active_low = 1,
< 	},
< 	.orientation = {1, 0, 0, 1},
---
> 	.hw_init = ct3610_hw_init,
> 	.shutdown = ct3610_hw_shutdown,
307c270
< {	
---
> {
391a355
> 
396c360
< 	ret = gpio_request(gpio, "rk_headset");
---
> 	ret = gpio_request(gpio, NULL);
441a406,430
> 
> #if defined(CONFIG_CT36X_TS)
> 
> #define TOUCH_MODEL		363
> #define TOUCH_MAX_X		1920
> #define TOUCH_MAX_y		1200
> #define TOUCH_RESET_PIN		RK30_PIN0_PB6
> #define TOUCH_INT_PIN		RK30_PIN1_PB7
> 
> static struct ct36x_platform_data ct36x_info = {
> 	.model   = TOUCH_MODEL,
> 	.x_max   = TOUCH_MAX_X,
> 	.y_max   = TOUCH_MAX_y,
> 
> 	.rst_io = {
> 		.gpio = TOUCH_RESET_PIN,
> 		.active_low = 1,
> 	},
> 	.irq_io = {
> 		.gpio = TOUCH_INT_PIN,
> 		.active_low = 1,
> 	},
> 	.orientation = {1, 0, 0, 1},
> };
> #endif
448c437
< #if defined(CONFIG_BACKLIGHT_RK29_BL)
---
> #ifdef CONFIG_BACKLIGHT_RK29_BL
450a440
> #define PWM_EFFECT_VALUE  0//1
452,456c442
< #if (defined(CONFIG_PIPO_M6PRO) || defined(CONFIG_PIPO_M7PRO))
< #define PWM_EFFECT_VALUE  0
< #else
< #define PWM_EFFECT_VALUE  1
< #endif
---
> #define LCD_DISP_ON_PIN
457a444
> #ifdef  LCD_DISP_ON_PIN
460,463c447
< 
< #define HUB_RST_PIN RK30_PIN0_PC2
< 
< 
---
> #endif
466c450
< 	int ret = 0, hubret = 0;
---
> 	int ret = 0;
469,470c453,454
< 	
< 	ret = gpio_request(BL_EN_PIN, "bl_en");
---
> #ifdef  LCD_DISP_ON_PIN

> 	ret = gpio_request(BL_EN_PIN, NULL);
473,475d456
< 	} else {
< 		gpio_direction_output(BL_EN_PIN, 0);
< 		gpio_set_value(BL_EN_PIN, BL_EN_VALUE);
478,485c459,461
< 	hubret = gpio_request(HUB_RST_PIN, "hub_rst");
< 	if (hubret != 0) {
< 		gpio_free(HUB_RST_PIN);
< 	} else
< 	{
< 		gpio_direction_output(HUB_RST_PIN, 0);
< 		gpio_set_value(HUB_RST_PIN, GPIO_HIGH);
< 	}
---
> 	gpio_direction_output(BL_EN_PIN, 0);
> 	gpio_set_value(BL_EN_PIN, BL_EN_VALUE);
> #endif
492c468
< 	int ret = 0;
---
> 	int ret = 0, pwm_gpio;
494c470
< 	gpio_direction_output(BL_EN_PIN, !BL_EN_VALUE);
---
> #ifdef  LCD_DISP_ON_PIN
495a472
> #endif
497,506c474,476
< 	int pwm_gpio = iomux_mode_to_gpio(PWM_MODE);
< 
< 	ret = gpio_request(pwm_gpio, "bl_pwm");
< 	if (ret != 0) {
< 		gpio_free(pwm_gpio);
< 	} else
< 	{
< 		gpio_direction_output(pwm_gpio, GPIO_LOW);
< 	}
< 
---
> 	pwm_gpio = iomux_mode_to_gpio(PWM_MODE);
> 	gpio_request(pwm_gpio, NULL);
> 	gpio_direction_output(pwm_gpio, GPIO_LOW);
512,514c482
< 	int ret, pwm_gpio;
< 
< 	pwm_gpio = iomux_mode_to_gpio(PWM_MODE);//PWM_MODE = PWM3
---
> 	int ret = 0, pwm_gpio;
516,518c484,485
< 	ret = gpio_request(pwm_gpio, "bl_pwm");
< 	if (ret != 0) {
< 		gpio_free(pwm_gpio);
---
> 	pwm_gpio = iomux_mode_to_gpio(PWM_MODE);
> 	if (gpio_request(pwm_gpio, NULL)) {
520,522c487
< 	} else
< 	{
< 		gpio_direction_output(pwm_gpio, GPIO_LOW);
---
> 		return -1;
524,525c489,491
< 	
< 	gpio_direction_output(BL_EN_PIN, !BL_EN_VALUE);//d33 - !BL_EN_VALUE replaces 0
---
> 	gpio_direction_output(pwm_gpio, GPIO_LOW);
> #ifdef  LCD_DISP_ON_PIN
> 	gpio_direction_output(BL_EN_PIN, 0);
527c493
< 	
---
> #endif
537c503
< 
---
> #ifdef  LCD_DISP_ON_PIN
541c507
< 
---
> #endif
546,564d511
< #if defined(CONFIG_PIPO_M7PRO)
<         .min_brightness = 50,
<         .max_brightness = 150,
< 	.pre_div = 40 * 1000,  // pwm output clk: 40k;
< #endif
< 
< #if defined(CONFIG_PIPO_M6PRO)
<         .min_brightness = 55,
<         .max_brightness = 255,
<   	.pre_div = 30 * 1000,
< #endif 
< 
< #if defined(CONFIG_PIPO_M8HD)
<         .min_brightness = 1,
<         .max_brightness = 100,
<   	.pre_div = 30 * 1000,
< #endif 
< 
< #if !(defined(CONFIG_PIPO_M7PRO) || defined(CONFIG_PIPO_M6PRO) || defined(CONFIG_PIPO_M8HD))
567,569d513
< 	.pre_div = 40 * 1000,  // pwm output clk: 40k;
< #endif
< 
570a515
> 	.pre_div = 40 * 1000,  // pwm output clk: 40k;
585a531
> 
588,589c534,535
< #if defined (CONFIG_GS_KXTIK)
< #define KXTIK_INT_PIN   RK30_PIN0_PB7
---
>  #if defined (CONFIG_GS_KXTIK)
>  #define KXTIK_INT_PIN   RK30_PIN0_PB7
591,592c537,538
< static int kxtik_init_platform_hw(void)
< {
---
>  static int kxtik_init_platform_hw(void)
>  {
596c542
< }
---
>  }
598c544
< static struct sensor_platform_data kxtik_info = {
---
>  static struct sensor_platform_data kxtik_info = {
604c550
< };
---
>  };
606c552
< #endif
---
>  #endif
639,651c585
< #if defined (CONFIG_PIPO_M7PRO)
< 	.orientation = {-1, 0, 0, 0, 1, 0, 0, 0, -1},//M7PRO
< #endif
< #if defined (CONFIG_PIPO_M6PRO) 
< 	.orientation = {0, 1, 0, 1, 0, 0, 0, 0, -1}, //M6PRO
< #endif
< #if defined (CONFIG_PIPO_M9PRO) 
< 	.orientation = {0, -1, 0, -1, 0, 0, 0, 0, -1}, //M9PRO
< #endif
< 
< #if (!defined (CONFIG_PIPO_M6PRO) && !defined (CONFIG_PIPO_M7PRO) && !defined (CONFIG_PIPO_M9PRO))
< 	.orientation = {0, 1, 0, 1, 0, 0, 0, 0, -1,},
< #endif
---
> 	.orientation = {-1, 0, 0, 0, 1, 0, 0, 0, -1},
653,654c587
< 
< #endif //(CONFIG_GS_LIS3DH)
---
> #endif
662c595
<        .layout = 8,	//8963 -M7Pro has  5
---
>        .layout = 5,	//8963ֻ\D0\E8Ҫ\B8\C4\D5\E2\B8\F6ֵ\BE\CD\D0\D0\C1ˡ\A3\BE\D8\D5\F3\D0\E8Ҫ\B9̶\A8\A1\A3\B2\BBҪ\D0޸ľ\D8\D5\F3
767a701
>        #if 0
772,777c706
< 	//.bp_reset = RK30_PIN2_PD5,
< #if defined (CONFIG_PIPO_M7PRO)
< 	.modem_usb_en = RK30_PIN3_PB1,
< 	.modem_uart_en = RK30_PIN0_PC2,
< #else
< 	.modem_usb_en = RK30_PIN0_PC7, 
---
> 	.modem_usb_en = RK30_PIN0_PC7,
779d707
< #endif
782c710,722
< 	};
---
> 	#else
>       .io_init = mt6229_io_init,
>   	.io_deinit = mt6229_io_deinit,
> 	.modem_power_en = RK30_PIN0_PC6,
> 	.bp_power = RK30_PIN2_PD5,
> 	//.bp_reset = RK30_PIN2_PD5,
> 	.modem_usb_en = RK30_PIN3_PB1,//RK30_PIN0_PC7,
> 	.modem_uart_en = RK30_PIN0_PC2,//RK30_PIN2_PD4,
> 	.bp_wakeup_ap = RK30_PIN0_PC5,//
> 	.ap_ready = RK30_PIN0_PC4,//
> 	#endif
> 
> };
795,797d734
< #if defined (CONFIG_PIPO_M6PRO)
< #define L3G4200D_INT_PIN  RK30_PIN1_PA7
< #else
799d735
< #endif
810,816d745
< #if defined(CONFIG_PIPO_M7PRO)
< 	.orientation = {-1, 0, 0 , 0 , 1, 0, 0, 0, -1},
< #endif 
< #if defined (CONFIG_PIPO_M6PRO)
< 	.orientation = {0, 1, 0, 1, 0, 0 , 0, 0, 1},
< #endif
< #if defined(CONFIG_PIPO_M9PRO)
818,821d746
< #endif
< #if !defined (CONFIG_PIPO_M6PRO) && !defined (CONFIG_PIPO_M7PRO) && !defined(CONFIG_PIPO_M9PRO)
< 	.orientation = {0, -1, 0 , -1 , 0, 0, 0, 0, -1},
< #endif
842c767
< #include "../../../drivers/video/rockchip/transmitter/mipi_dsi.h"
---
> #include "../../../drivers/video/display/transmitter/mipi_dsi.h"
847c772
< 		.reset_pin = RK30_PIN0_PA7,   //RESET PIN (LCD_RST)
---
> 		.reset_pin = RK30_PIN0_PA7,   //RESET PIN ,LCD_RST
850,855c775,776
< 	.vddio = {                       //POWER ON (LCD_EN)
< #if defined(CONFIG_PIPO_U8)
< 		.enable_pin = RK30_PIN0_PB0,//PB1
< #else
< 		.enable_pin = INVALID_GPIO,
< #endif
---
> 	.vddio = {                       //POWER ON ,LCD_EN
> 		.enable_pin = INVALID_GPIO, 
857c778
< 		.name = "ssd2828_vddio",
---
> 		.name = NULL,
865,868c786
< 	.shut = {                     //SHUT PIN (LCD_CS)
< #if defined(CONFIG_PIPO_M9PRO)
< 		.enable_pin = RK30_PIN0_PB0, //M9Pro only
< #else
---
> 	.shut = {                     //SHUT PIN  ,LCD_CS
870d787
< #endif
872d788
< 		.name = "ssd2828_shut",
890,893d805
< #endif
< 
< #define LCD_CS_PIN         INVALID_GPIO//RK30_PIN0_PB0
< #define LCD_CS_VALUE       GPIO_HIGH
895,904d806
< #if defined (CONFIG_PIPO_M9PRO)
< 	#define LCD_EN_PIN         RK30_PIN1_PB2
< #else
< 	#define LCD_EN_PIN         INVALID_GPIO //RK30_PIN0_PB0 or PB1
< #endif
< 
< #if defined (CONFIG_PIPO_M6PRO)
< 	#define LCD_EN_VALUE       GPIO_HIGH
< #else
< 	#define LCD_EN_VALUE       GPIO_LOW
907,912c809,814
< #define LCD_PWR_PIN         INVALID_GPIO //RK30_PIN1_PB5
< #define LCD_PWR_VALUE       GPIO_HIGH
< 
< /* D33
< #define LCD_CS_PIN_1        RK30_PIN3_PD4
< #define LCD_CS_VALUE_1      GPIO_HIGH
---
> //#if DS1006H_V1_2_SUPPORT
> //#define LCD_CS_PIN         RK30_PIN0_PB0
> //#else
> #define LCD_CS_PIN         INVALID_GPIO
> //#endif
> #define LCD_CS_VALUE       GPIO_HIGH
914,916c816,821
< #define LCD_PWR_PIN_1         RK30_PIN0_PA7
< #define LCD_PWR_VALUE_1       GPIO_HIGH
< */
---
> //#if DS1006H_V1_2_SUPPORT
> //#define LCD_EN_PIN         RK30_PIN0_PB1
> //#else
> #define LCD_EN_PIN         RK30_PIN0_PB0
> //#endif
> #define LCD_EN_VALUE       GPIO_LOW
924c829
< 		ret = gpio_request(LCD_CS_PIN, "lcd cs");
---
> 		ret = gpio_request(LCD_CS_PIN, NULL);
939c844
< 		ret = gpio_request(LCD_EN_PIN, "lcd en");
---
> 		ret = gpio_request(LCD_EN_PIN, NULL);
951,997d855
< 
< 	if(LCD_PWR_PIN !=INVALID_GPIO)
< 	{
< 		ret = gpio_request(LCD_PWR_PIN, "lcd pwr");
< 		if (ret != 0)
< 		{
< 			gpio_free(LCD_PWR_PIN);
< 			printk(KERN_ERR "request lcd pwr pin fail!\n");
< 			return -1;
< 		}
< 		else
< 		{
< 			gpio_direction_output(LCD_PWR_PIN, LCD_PWR_VALUE);
< 		}
< 	}
< 
< /*	if(LCD_CS_PIN_1 !=INVALID_GPIO)
< 	{
< 		ret = gpio_request(LCD_CS_PIN_1, "lcd cs 1");
< 		if (ret != 0)
< 		{
< 			gpio_free(LCD_CS_PIN_1);
< 			printk(KERN_ERR "request lcd cs pin 1 fail!\n");
< 			return -1;
< 		}
< 		else
< 		{
< 			gpio_direction_output(LCD_CS_PIN_1, LCD_CS_VALUE_1);
< 		}
< 	}
< 
< 	if(LCD_PWR_PIN_1 !=INVALID_GPIO)
< 	{
< 		ret = gpio_request(LCD_PWR_PIN_1, "LCD pwr 1");
< 		if (ret != 0)
< 		{
< 			gpio_free(LCD_PWR_PIN_1);
< 			printk(KERN_ERR "request pwr pin 1 fail!\n");
< 			return -1;
< 		}
< 		else
< 		{
< 			gpio_direction_output(LCD_PWR_PIN_1, LCD_PWR_VALUE_1);
< 		}
< 	}
< 
< */
1000d857
< 
1007,1008d863
< 
< 
1013,1028d867
< 
< 	if(LCD_PWR_PIN !=INVALID_GPIO)
< 	{
< 		gpio_direction_output(LCD_PWR_PIN, !LCD_PWR_VALUE);
< 	}
< /*
< 	if(LCD_CS_PIN_1 !=INVALID_GPIO)
< 	{
< 		gpio_set_value(LCD_CS_PIN_1, !LCD_CS_VALUE_1);
< 	}
< 
< 	if(LCD_PWR_PIN_1 !=INVALID_GPIO)
< 	{
< 		gpio_direction_output(LCD_PWR_PIN_1, !LCD_PWR_VALUE_1);
< 	}
< */
1037,1038d875
< 
< 
1043,1059d879
< 
< 	if(LCD_PWR_PIN !=INVALID_GPIO)
< 	{
< 		gpio_direction_output(LCD_PWR_PIN, LCD_PWR_VALUE);
< 	}
< 
< /*
< 	if(LCD_CS_PIN_1 !=INVALID_GPIO)
< 	{
< 		gpio_set_value(LCD_CS_PIN_1, LCD_CS_VALUE_1);
< 	}
< 
< 	if(LCD_PWR_PIN_1 !=INVALID_GPIO)
< 	{
< 		gpio_direction_output(LCD_PWR_PIN_1, LCD_PWR_VALUE_1);
< 	}
< */
1065,1071d884
< #if defined (CONFIG_PIPO_M6PRO)
< 	.prop	   = PRMRY,		//primary display device
< 	.io_init   = rk_fb_io_init,
< 	.io_disable = rk_fb_io_disable,
< 	.io_enable = rk_fb_io_enable,
< 	.set_screen_info = set_lcd_info,
< #else
1075c888
< #endif
---
> 
1081,1085d893
< #if defined (CONFIG_PIPO_M6PRO)
< 	.prop           = EXTEND,       //extend display device
<        .lcd_info  = NULL,
<        .set_screen_info = hdmi_init_lcdc,
< #else
1091c899
< #endif	
---
> 	
1095d902
< 
1246,1253c1053,1054
< #define RK_HDMI_RST_PIN		RK30_PIN3_PB2
< 
< #if defined (CONFIG_PIPO_U8)
< #define RK_HDMI_POWER_EN_PIN	RK30_PIN2_PD6
< #else
< #define RK_HDMI_POWER_EN_PIN	INVALID_GPIO//RK30_PIN1_PB5
< #endif
< 
---
> #define RK_HDMI_RST_PIN 			RK30_PIN3_PB2
> #define RK_HDMI_POWER_EN_PIN         RK30_PIN1_PB5
1256,1258c1057
< 	int ret_en = 0;
< 	int ret_rst = 0;
< 
---
> 	int ret;
1261,1263c1060,1062
< 	if(RK_HDMI_POWER_EN_PIN != INVALID_GPIO) {
< 		ret_en = gpio_request(RK_HDMI_POWER_EN_PIN, "hdmi_enable");
< 		if (ret_en !=0) {
---
> 	   if(RK_HDMI_POWER_EN_PIN != INVALID_GPIO)
> 	{
> 		if (gpio_request(RK_HDMI_POWER_EN_PIN, NULL)) {
1265c1064
< 			gpio_free(RK_HDMI_POWER_EN_PIN);
---
> 			return -1;
1269d1067
< 	}
1270a1069
> 	}
1272,1275c1071,1073
< 
< 	if(RK_HDMI_RST_PIN != INVALID_GPIO) {
< 		ret_rst = gpio_request(RK_HDMI_RST_PIN, "hdmi_reset");
< 		if (ret_rst != 0) {
---
> 	if(RK_HDMI_RST_PIN != INVALID_GPIO)
> 	{
> 		if (gpio_request(RK_HDMI_RST_PIN, NULL)) {
1277c1075
< 			gpio_free(RK_HDMI_RST_PIN);
---
> 			return -1;
1285,1286c1083
< 
< 	return ret_rst + ret_en;
---
> 	return 0;
1288d1084
< 
1293d1088
< 
1295d1089
< #if defined (CONFIG_PIPO_M6PRO)
1297,1299d1090
< #else
< #define ION_RESERVE_SIZE        (120 * SZ_1M)
< #endif
1301d1091
< 
1309c1099
< 			//.size = ION_RESERVE_SIZE,
---
> //			.size = ION_RESERVE_SIZE,
1323,1385d1112
< #if defined (CONFIG_DP_ANX6345)
< 
< 	#define DVDD33_EN_PIN 		RK30_PIN0_PB0
< 	#define DVDD33_EN_VALUE 	GPIO_LOW
< 	
< 	#define DVDD18_EN_PIN 		RK30_PIN3_PD4//RK30_PIN3_PD4//RK30_PIN1_PB6//RK30_PIN4_PC7
< 	#define DVDD18_EN_VALUE 	GPIO_HIGH
< 
< 	#define EDP_RST_PIN 		RK30_PIN0_PB4
< 	static int rk_edp_power_ctl(void)
< 	{
< 		int ret;
< 		ret = gpio_request(DVDD33_EN_PIN, "ANX6345_D33_en");
< 		if (ret != 0)
< 		{
< 			gpio_free(DVDD33_EN_PIN);
< 			printk(KERN_ERR "ANX6345 request dvdd33 en pin fail!\n");
< 			return -1;
< 		}
< 		else
< 		{
< 			gpio_direction_output(DVDD33_EN_PIN, DVDD33_EN_VALUE);
< 		}
< 		msleep(5);
< 		
< 		ret = gpio_request(DVDD18_EN_PIN, "ANX6345_d18_en");
< 		if (ret != 0)
< 		{
< 			gpio_free(DVDD18_EN_PIN);
< 			printk(KERN_ERR "ANX6345 request dvdd18 en pin fail!\n");
< 			return -1;
< 		}
< 		else
< 		{
< 			gpio_direction_output(DVDD18_EN_PIN, DVDD18_EN_VALUE);
< 		}
< 		
< 		ret = gpio_request(EDP_RST_PIN, "ANX6345_rst");
< 		if (ret != 0)
< 		{
< 			gpio_free(EDP_RST_PIN);
< 			printk(KERN_ERR "request rst pin fail!\n");
< 			return -1;
< 		}
< 		else
< 		{
< 			gpio_direction_output(EDP_RST_PIN, GPIO_LOW);
< 			msleep(50);
< 			gpio_direction_output(EDP_RST_PIN, GPIO_HIGH);
< 		}
< 		return 0;
< 		
< 	}
< 	static struct anx6345_platform_data anx6345_platform_data = {
< 		.power_ctl 	= rk_edp_power_ctl,
< 		.dvdd33_en_pin 	= DVDD33_EN_PIN,
< 		.dvdd33_en_val 	= DVDD33_EN_VALUE,
< 		.dvdd18_en_pin 	= DVDD18_EN_PIN,
< 		.dvdd18_en_val 	= DVDD18_EN_VALUE,
< 		.edp_rst_pin   	= EDP_RST_PIN,
< 	};
< #endif
< 
1630d1356
< 
1636,1643d1361
< 
< static int batt_table[2*11+6] =
< {
< 	0x4B434F52, 0x7461625F, 0x79726574, 1, 390, 100,
< 	6500, 7213, 7314, 7381, 7456, 7517, 7616, 7756, 7898, 8062, 8294,
< 	7004, 7683, 7790, 7855, 7936, 8049, 8216, 8380, 8386, 8390, 8387
< };
< 
1649c1367
<         .usb_det_pin     = INVALID_GPIO,
---
> 	 .usb_det_pin = INVALID_GPIO,
1654,1655c1372,1373
<         .pull_up_res       = 390,  // divider resistance, pull-up resistor
<         .pull_down_res     = 100,  // divider resistance, pull-down resistor
---
>        .pull_up_res = 200,     //divider resistance ,  pull-up resistor
>        .pull_down_res = 120, //divider resistance , pull-down resistor
1658,1660c1376,1377
<         .save_capacity      = 1,
< 	.use_board_table    = 1,
< 	.board_batt_table   = batt_table
---
>         .save_capacity   = 1 ,
>         .low_voltage_protection = 3600,    
1670d1386
< 
1674,1678c1390
< /*
<    note the follow array must set depend on the battery that you use
<    you must send the battery to cellwise-semi the contact information:
<    name: chen gan; tel:13416876079; E-mail: ben.chen@cellwise-semi.com
<  */
---
> 
1680,1726c1392,1404
< /*
< 	0x15, 0x42, 0x60, 0x59, 0x52,
< 	0x58, 0x4D, 0x48, 0x48, 0x44,
< 	0x44, 0x46, 0x49, 0x48, 0x32,
< 	0x24, 0x20, 0x17, 0x13, 0x0F,
< 	0x19, 0x3E, 0x51, 0x45, 0x08,
< 	0x76, 0x0B, 0x85, 0x0E, 0x1C,
< 	0x2E, 0x3E, 0x4D, 0x52, 0x52,
< 	0x57, 0x3D, 0x1B, 0x6A, 0x2D,
< 	0x25, 0x43, 0x52, 0x87, 0x8F,
< 	0x91, 0x94, 0x52, 0x82, 0x8C,
< 	0x92, 0x96, 0xFF, 0x7B, 0xBB,
< 	0xCB, 0x2F, 0x7D, 0x72, 0xA5,
< 	0xB5, 0xC1, 0x46, 0xAE
< */
< /*
< 	0x15, 0x20, 0x5C, 0x5A, 0x58,
< 	0x54, 0x50,	0x4C, 0x49, 0x49,
< 	0x47, 0x45,	0x41, 0x38, 0x2E,
< 	0x26, 0x1D,	0x1A, 0x13, 0x11,
< 	0x1D, 0x3E,	0x4E, 0x4C, 0x36,
< 	0x41, 0x0B, 0x85, 0x1E, 0x3C,
< 	0x43, 0x8B, 0x95, 0x70, 0x61,
< 	0x69, 0x42, 0x1B, 0x52, 0x41,
< 	0x08, 0x22, 0x5F, 0x86, 0x8F,
< 	0x91, 0x91, 0x18, 0x58, 0x82,
< 	0x94, 0xA5, 0x42, 0xB2, 0xDE,
< 	0xCB, 0x2F, 0x7D, 0x72, 0xA5,
< 	0xB5, 0xC1,	0x27, 0x09
< */
< //?e��-_DS1006_JSH101_MB7600_ProfileV3LT_20 130705.txt
< /*
< 	0x15, 0x13, 0x59, 0x58, 0x57,
< 	0x55, 0x4F, 0x4C, 0x4A, 0x49,
< 	0x47, 0x45, 0x41, 0x38, 0x2D,
< 	0x26, 0x1E, 0x18, 0x13, 0x12,
< 	0x1D, 0x41, 0x4E, 0x4C, 0x34,
< 	0x50, 0x0A, 0xE1, 0x1B, 0x35,
< 	0x44, 0x89, 0x99, 0x74, 0x62,
< 	0x6A, 0x43, 0x1B, 0x52, 0x4E, 
<     0x0F, 0x22, 0x52, 0x87, 0x8F,
< 	0x91, 0x94, 0x52, 0x82, 0x8C,
< 	0x92, 0x96, 0xB5, 0xB7, 0xE1,
< 	0xCB, 0x2F, 0x7D, 0x72, 0xA5,
< 	0xB5, 0xC1, 0x46, 0xAE
< */
< #if defined(CONFIG_PIPO_M7PRO)
---
> #if 0 //cw ceshi
> 0x15, 0x6C, 0x62, 0x5B, 0x59, 0x59,
>  0x53, 0x50, 0x4C, 0x4A, 0x49, 0x47,
>  0x43, 0x3E, 0x32, 0x27, 0x21, 0x19, 
>  0x17, 0x17, 0x21, 0x3E, 0x49, 0x43, 
>  0x36, 0x7F, 0x08, 0xF6, 0x12, 0x23, 
>  0x47, 0x67, 0x78, 0x6C, 0x66, 0x6A, 
>  0x41, 0x1B, 0x53, 0x8C, 0x21, 0x22, 
>  0x52, 0x87, 0x8F, 0x91, 0x94, 0x52, 
>  0x82, 0x8C, 0x92, 0x96, 0x5E, 0x78,
>  0x9D, 0xCB, 0x2F, 0x7D, 0x72, 0xA5, 
>  0xB5, 0xC1, 0x46, 0xAE,
> #endif
1740,1755c1418,1419
< #else
< //2- ?e��-_DS1006_JSH101_MB7600_ProfileV3LT_20 130705.txt
<     0x15, 0x17, 0x5B, 0x58, 0x57,
< 	0x55, 0x4F, 0x4C, 0x4A, 0x49,
< 	0x47, 0x45, 0x41, 0x37, 0x2E,
< 	0x26, 0x1D, 0x19, 0x15, 0x17,
< 	0x20, 0x3C, 0x48, 0x43, 0x35,
< 	0x5A, 0x0A, 0xE1, 0x1C, 0x39,
<     0x44, 0x6D, 0x78, 0x6B, 0x66,
< 	0x6B, 0x42, 0x1B, 0x52, 0x4D,
< 	0x0F, 0x22, 0x52, 0x87, 0x8F,
< 	0x91, 0x94, 0x52, 0x82, 0x8C,
< 	0x92, 0x96, 0x2E, 0x82, 0xA5,
< 	0xCB, 0x2F, 0x7D, 0x72, 0xA5,
<     0xB5, 0xC1, 0x27, 0x0A
< #endif
---
> 
> 	
1759,1765c1423,1431
< 	.dc_det_pin	= RK30_PIN0_PB2,
< 	.bat_low_pin    = RK30_PIN0_PB1,
<  	.chg_ok_pin	= RK30_PIN0_PA6,//INVALID_GPIO??
< 
< 	.dc_det_level	= GPIO_LOW,
< 	.bat_low_level  = GPIO_LOW,   
< 	.chg_ok_level	= GPIO_HIGH,
---
> 	.dc_det_pin     = RK30_PIN0_PB2,
>         .bat_low_pin    = RK30_PIN0_PB1,
>         .chg_ok_pin     = INVALID_GPIO,
> 
>         .dc_det_level   = GPIO_LOW,
>         .bat_low_level  = GPIO_LOW,   
>         .chg_ok_level   = GPIO_HIGH,
> 
>         .cw_bat_config_info     = config_info,
1767d1432
< 	.cw_bat_config_info     = config_info,
1771a1437
> 
1840c1506
<         .io             = INVALID_GPIO,//RK30_PIN3_PD1, 
---
>         .io             = INVALID_GPIO,//RK30_PIN3_PD1, // set io to INVALID_GPIO for disable it
1859,1863c1525
< #if defined (CONFIG_PIPO_M7PRO)
<             .io         = RK30_PIN3_PC7, 
< #else
<             .io         = RK30_PIN0_PA5, // d33 standard setting
< #endif
---
>             .io         = RK30_PIN3_PC7, // set io to INVALID_GPIO for disable it
1866c1528
<                 .name   = "bt_host_wake",
---
>                 .name   = NULL,
1894,1913c1556
< 	printk("%s \n", __FUNCTION__);
< 
< #if defined(CONFIG_PIPO_M9PRO)
< 	gpio_request(RK30_PIN1_PB5, "GPS_EN");
< 	gpio_direction_output(RK30_PIN1_PB5, GPIO_LOW);
< 
< 	iomux_set(GPS_RFCLK);//GPS_CLK
< 	iomux_set(GPS_MAG);//GPS_MAG
< 	iomux_set(GPS_SIG);//GPS_SIGN
< 
< 	gpio_request(RK30_PIN1_PA6, "GPS_A6");
< 	gpio_direction_output(RK30_PIN1_PA6, GPIO_LOW);
< 
< 	gpio_request(RK30_PIN1_PA5, "GPS_A5");
< 	gpio_direction_output(RK30_PIN1_PA5, GPIO_LOW);	
< 
< 	gpio_request(RK30_PIN1_PA7, "GPS_A7");
< 	gpio_direction_output(RK30_PIN1_PA7, GPIO_LOW);		
< 
< #else
---
> 		printk("%s \n", __FUNCTION__);
1918,1919c1561
< 
< 		gpio_request(RK30_PIN1_PB5, "GPS_EN");
---
> 		gpio_request(RK30_PIN1_PB5, NULL);
1926c1568
< 		gpio_request(RK30_PIN0_PD6, "gps_spi_clk");//SPI_CLK
---
> 		gpio_request(RK30_PIN0_PD6, NULL);//SPI_CLK
1929c1571
< 		gpio_request(RK30_PIN0_PD5, "gps_spi_mosi");	 //SPI_MOSI
---
> 		gpio_request(RK30_PIN0_PD5, NULL);	 //SPI_MOSI
1932c1574
< 		gpio_request(RK30_PIN0_PD7, "gps_spi_cs");//SPI_CS
---
> 		gpio_request(RK30_PIN0_PD7, NULL);//SPI_CS
1934c1576
< #endif		
---
> 		
1936d1577
< }
1937a1579
> }
1996,2005c1638,1640
< #if defined(CONFIG_PIPO_M9PRO)
< 	.GpsSpi_CSO = RK30_PIN1_PA4,    //GPIO index
< 	.GpsSpiClk = RK30_PIN1_PA5,     //GPIO index
< 	.GpsSpiMOSI = RK30_PIN1_PA7,	  //GPIO index
< 	.GpsIrq = IRQ_GPS,
< 	.GpsSpiEn = 0, 
< #else
< 	.GpsSpi_CSO = RK30_PIN0_PD7,    
< 	.GpsSpiClk = RK30_PIN0_PD6,
< 	.GpsSpiMOSI = RK30_PIN0_PD5,
---
> 	.GpsSpi_CSO = RK30_PIN0_PD7,    //GPIO index
> 	.GpsSpiClk = RK30_PIN0_PD6,     //GPIO index
> 	.GpsSpiMOSI = RK30_PIN0_PD5,	  //GPIO index
2008d1642
< #endif
2026,2028d1659
< 		      #if DS1006H_V1_2_SUPPORT
<                     .io             = RK30_PIN3_PC7, // set io to INVALID_GPIO for disable it
< 		      #else
2030d1660
< 		    	#endif
2038,2040d1667
< 		        #if DS1006H_V1_2_SUPPORT
<                     .io             = RK30_PIN3_PD1,
< 		        #else
2042d1668
< 		        #endif
2050,2052d1675
< 		          #if DS1006H_V1_2_SUPPORT
<                        .io             = RK30_PIN0_PA5,
< 		          #else
2054d1676
< 			    #endif
2178,2182c1800,1804
< 	{
< 		.type			= "rt5623",
< 		.addr			= 0x1a,
< 		.flags			= 0,
< 	},
---
> 			{
> 					.type					= "rt5623",
> 					.addr					= 0x1a,
> 					.flags					= 0,
> 			},
2194,2195d1815
< 
< #if defined(CONFIG_PIPO_M7PRO) || defined(CONFIG_PIPO_U8)
2197,2203c1817,1822
<     {
<         .type           = "cw201x",
<         .addr           = 0x62,
<         .flags          = 0,
<         .platform_data  = &cw_bat_platdata,
<     },
< #endif
---
>         {
>                 .type           = "cw201x",
>                 .addr           = 0x62,
>                 .flags          = 0,
>                 .platform_data  = &cw_bat_platdata,
>         },
2206,2211c1825,1832
< #if defined (CONFIG_BATTERY_OZ8806)
< 	{
< 		.type          = "oz8806",
< 		.addr          = 0x2f,
< 		.flags         = 0,
< 	},
---
> #if defined (CONFIG_GS_KXTIK)
>         {
>                 .type           = "gs_kxtik",
>                 .addr           = 0x0E,
>                 .flags          = 0,
>                 .irq            = KXTIK_INT_PIN,
>                 .platform_data = &kxtik_info,
>         },
2273d1893
< 
2282c1902
< #endif
---
>  #endif
2342,2345c1962,1963
< 		//.min_uv          = 3000000,
< 		//.max_uv         = 3000000,
< 		.min_uv          = 3300000,
< 		.max_uv         = 3300000,
---
> 		.min_uv          = 3100000,
> 		.max_uv         = 3100000,
2347c1965
< 		.suspend_vol  =  3300000,
---
> 		.suspend_vol  =  3100000,
2349c1967
< 		.suspend_vol  =  3300000,
---
> 		.suspend_vol  =  3100000,
2382,2383c2000,2001
< 		.min_uv          = 1800000,//3300000,m7pro 280000
< 		.max_uv         = 1800000,//3300000,
---
> 		.min_uv          = 2800000,//3300000,
> 		.max_uv         = 2800000,//3300000,
2614,2623d2231
< #if !defined(CONFIG_PIPO_M7PRO) && !defined(CONFIG_PIPO_U8)
< #if defined (CONFIG_CW2015_BATTERY)
<     {
<         .type           = "cw201x",
<         .addr           = 0x62,
<         .flags          = 0,
<         .platform_data  = &cw_bat_platdata,
<     },
< #endif
< #endif
2711,2712c2319
< 
< #if defined (CONFIG_DP_ANX6345)
---
> #if defined (CONFIG_CT36X_TS)
2714,2715c2321,2322
< 		.type          = "anx6345",
< 		.addr          = 0x39,
---
> 		.type	       = CT36X_NAME,
> 		.addr          = 0x01,
2717c2324
< 		.platform_data = &anx6345_platform_data,
---
> 		.platform_data = &ct36x_info,
2719a2327,2335
> #if defined(CONFIG_TOUCHSCREEN_CT36X)
> {
> 	.type		="ct3610_ts",
> 	.addr		=0x01,
> 	.flags		=0,
> 	.irq		= RK30_PIN1_PB7,
> 	.platform_data = &ct3610_info,
> },
> #endif
2722,2728c2338,2344
< 	{
< 		.type		= GTP_I2C_NAME ,
<         	.addr		= GTP_I2C_ADDR ,
<         	.flags		= 0,
<         	.irq		= RK30_PIN1_PB7,
<         	//.platform_data = &ts_pdata,
< 	},
---
>     {
>         .type          = GTP_I2C_NAME ,
>         .addr          = GTP_I2C_ADDR ,
>         .flags         = 0,
>         .irq           = RK30_PIN1_PB7,
>         //.platform_data = &ts_pdata,
>     },
2731,2739d2346
< #if defined (CONFIG_CT36X_TS) 
< 	{
< 		.type		= CT36X_NAME,
< 		.addr		= 0x01,
< 		.flags		= 0,
< 		.irq		= RK30_PIN1_PB7,
< 		.platform_data	= &ct36x_info,
< 	},
< #endif
2741c2348,2355
< #if defined(CONFIG_TOUCHSCREEN_CT36X)
---
> #if defined (CONFIG_LS_US5151)
>         {    
>                 .type           = "us5151",
>                 .addr           = 0x10,
>                 .flags          = 0, 
>         },   
> #endif
> #if defined (CONFIG_LS_CM3217)
2743,2747c2357,2360
< 		.type		= "VTL CT363",
< 		.addr		= 0x01,
< 		.flags		= 0,
< 		.irq		= RK30_PIN1_PB7,
< //		.platform_data	= &ct36x_info,
---
> 		.type          = "lightsensor",
> 		.addr          = 0x10,
> 		.flags         = 0,
> 		.platform_data = &cm3217_info,
2750,2751c2363
< 
< #if defined(CONFIG_HDMI_CAT66121) && (defined(CONFIG_PIPO_M7PRO) || defined(CONFIG_PIPO_M9PRO))
---
> #if defined(CONFIG_HDMI_CAT66121)
2760,2776d2371
< 
< #if defined (CONFIG_LS_CM3217)
< 	{
< 		.type          = "lightsensor",
< 		.addr          = 0x10,
< 		.flags         = 0,
< 		.platform_data = &cm3217_info,
< 	},
< #endif
< #if defined (CONFIG_LS_US5151)
<         {    
<                 .type           = "us5151",
<                 .addr           = 0x10,
<                 .flags          = 0, 
<         },   
< #endif
< 
2787,2788c2382
< 
< #if defined(CONFIG_HDMI_CAT66121) && !(defined(CONFIG_PIPO_M7PRO) || defined(CONFIG_PIPO_M9PRO))
---
> #if defined (CONFIG_MFD_RK616)
2790,2794c2384,2387
< 		.type		= "cat66121_hdmi",
< 		.addr		= 0x4c,
< 		.flags		= 0,
< 		.irq		= RK30_PIN2_PD6,
< 		.platform_data 	= &rk_hdmi_pdata,
---
> 		.type	       = "rk616",
> 		.addr	       = 0x50,
> 		.flags	       = 0,
> 		.platform_data = &rk616_pdata,
2796c2389,2397
< #endif //Cat66121
---
> #endif
> #if defined (CONFIG_SND_SOC_RT5616)
>     {
>                 .type                   = "rt5616",
>                 .addr                   = 0x1b,
>                 .flags                  = 0,
> 
>      },
> #endif
2805,2827c2406,2411
< 	#ifdef CONFIG_RK610_TVOUT
< 			{
< 				.type			= "rk610_tvout",
< 				.addr			= 0x42,
< 				.flags			= 0,
< 			},
< 	#endif
< 	#ifdef CONFIG_HDMI_RK610
< 			{
< 				.type			= "rk610_hdmi",
< 				.addr			= 0x46,
< 				.flags			= 0,
< 				.irq			= INVALID_GPIO,
< 			},
< 	#endif
< 	#ifdef CONFIG_SND_SOC_RK610
< 			{//RK610_CODEC addr  from 0x60 to 0x80 (0x60~0x80)
< 				.type			= "rk610_i2c_codec",
< 				.addr			= 0x60,
< 				.flags			= 0,
< 				.platform_data		= &rk610_codec_pdata,			
< 			},
< 	#endif
---
> #ifdef CONFIG_RK610_TVOUT
> 		{
> 			.type			= "rk610_tvout",
> 			.addr			= 0x42,
> 			.flags			= 0,
> 		},
2829,2835c2413,2427
< 
< #if defined (CONFIG_SND_SOC_RT5616)
<         {
<                 .type                   = "rt5616",
<                 .addr                   = 0x1b,
<                 .flags                  = 0,
<         },
---
> #ifdef CONFIG_HDMI_RK610
> 		{
> 			.type			= "rk610_hdmi",
> 			.addr			= 0x46,
> 			.flags			= 0,
> 			.irq			= INVALID_GPIO,
> 		},
> #endif
> #ifdef CONFIG_SND_SOC_RK610
> 		{//RK610_CODEC addr  from 0x60 to 0x80 (0x60~0x80)
> 			.type			= "rk610_i2c_codec",
> 			.addr			= 0x60,
> 			.flags			= 0,
> 			.platform_data		= &rk610_codec_pdata,			
> 		},
2837,2843d2428
< 
< #if defined (CONFIG_SND_SOC_RT5631)
<         {
<                 .type                   = "rt5631",
<                 .addr                   = 0x1a,
<                 .flags                  = 0,
<         },
2912c2497
< 		  * and then plug in charger. -- Cody Xie*/
---
> 		  * and then plug in charger. -- Cody Xie
2917c2502
< 		  
---
> 		  */
2926,2928c2511
< 	int ret;	
< 
< 	//avs_init(); //NAND io remap - possibly comment out? d33
---
> 	avs_init();
2934c2517
< 	gpio_direction_output(POWER_ON_PIN, GPIO_HIGH);
---
>         gpio_direction_output(POWER_ON_PIN, GPIO_HIGH);
2936,2943c2519,2531
< /*
< #if (defined(CONFIG_PIPO_M9PRO) || defined (CONFIG_PIPO_M6PRO))
< //gps lan
< 	if (gpio_request(RK30_PIN3_PC7, "RK30_GPS_LAN")) {
< 		gpio_free(RK30_PIN3_PC7);
< 		printk("func %s, line %d: request GPS_LAN gpio failed\n", __FUNCTION__, __LINE__);
< 	} else {
< 		gpio_direction_output(RK30_PIN3_PC7, GPIO_HIGH);
---
>        ///////////
>        int ret = gpio_request(RK30_PIN0_PA3, NULL);
>        if (ret != 0) {
>              printk("request gpio RK30_PIN0_PA3 faile ,ret = %d ! \n",ret);
>                gpio_free(RK30_PIN0_PA3);
>        }
>        gpio_direction_output(RK30_PIN0_PA3, 1);
>        gpio_set_value(RK30_PIN0_PA3, 1);
> 
> 
>     if (gpio_request(RK30_PIN0_PC3, NULL)) {
> 		printk("request gpio RK30_PIN0_PC3 fail !\n");
> 		return -1;
2945,2946c2533,2559
< #endif
< */
---
> 	gpio_direction_output(RK30_PIN0_PC3, 1);
> 	gpio_set_value(RK30_PIN0_PC3, 1);
> 
>     if (gpio_request(RK30_PIN0_PD4, NULL)) {
> 		printk("request gpio RK30_PIN0_PD4 fail !\n");
> 		return -1;
> 	}
> 	gpio_direction_output(RK30_PIN0_PD4, 1);
> 	gpio_set_value(RK30_PIN0_PD4, 1);
> 	///////
> 
> 	if (gpio_request(RK30_PIN2_PD4, NULL)) {
> 		printk("request gpio RK30_PIN2_PD4 fail !\n");
> 		return -1;
> 	}
> 	gpio_direction_output(RK30_PIN2_PD4, 1);
> 	gpio_set_value(RK30_PIN2_PD4, 1); 
> 	///////
> 
> //for ap6330 ap6210
>     if (gpio_request(RK30_PIN1_PA7, NULL)) {
> 		printk("######### request gpio RK30_PIN1_PA7 fail !\n");
> 		return -1;
> 	}
> 	gpio_direction_input(RK30_PIN1_PA7);
> //
> 
2974c2587
< 		int ump_mem_phy_size=320UL*1024UL*1024UL; 
---
> 		int ump_mem_phy_size=512UL*1024UL*1024UL; 
3045c2658
<         {.frequency = 1608 * 1000,      .index = 1300 * 1000},
---
>         {.frequency = 1608 * 1000,      .index = 1350 * 1000},
3050,3051c2663,2664
<         {.frequency = 312 * 1000,       .index = 900 * 1000},
<         {.frequency = 504 * 1000,       .index = 925 * 1000},
---
>         {.frequency = 312 * 1000,       .index = 925 * 1000},
>         {.frequency = 504 * 1000,       .index = 950 * 1000},
3091,3092c2704,2705
<     //{.frequency = 460 * 1000 + DDR_FREQ_DUALVIEW,     .index = 1150 * 1000},
< 	{.frequency = 528 * 1000 + DDR_FREQ_NORMAL,     .index = 1250 * 1000},
---
> 	{.frequency = 580* 1000 + DDR_FREQ_NORMAL,     .index = 1300 * 1000},
> 	//{.frequency = 528* 1000 + DDR_FREQ_DUALVIEW,     .index = 1250 * 1000},
